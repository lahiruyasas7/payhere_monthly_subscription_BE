// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id String @id @default(uuid())
  firstName String
  lastName String
  email String @unique
  password String
  phoneNumber String
  address String
  city String
  country String
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  payment_eligibility Boolean @default(false)
  subscription Subscription?
}

model Subscription {
  subscriptionId          String      @id @default(cuid())
  orderId     String      @unique
  items       String
  totalAmount String
  userEmail   String
  status      SubscriptionStatus
  customer_token         String   
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user      User   @relation(fields: [user_id], references: [user_id]) // Define relationship
  user_id    String  @unique // Foreign key @unique
  subscriptionPayment SubscriptionPayment[]
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  PENDING
}

enum SubscriptionPaymentStatus {
  SUCCESS // 2 - success
  PENDING // 0 - pending
  CANCELED // -1 - canceled
  FAILED // -2 - failed
}

model SubscriptionPayment {
  payment_id             String        @id @default(uuid())
  payhere_payment_id     String?       @unique
  payhere_status_message String?
  payment_amount         Decimal       @default(0.00)
  payment_date           DateTime      @default(now())
  status                 SubscriptionPaymentStatus
  md5sig                 String

  subscription     Subscription    @relation(fields: [subscriptionId], references: [subscriptionId])
  subscriptionId  String   
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model SubscribeCount {
  id     String @id @default(uuid())
  lastId Int
}
